-- ISA -- 

see spreadsheet

16-bit operands
32-bit max ALU and AC result (mul requires 2B to store result)
4-bit opcode

-- Registers -- 

13 general purpose  : r0 - r12 (32-bits)
2 operand registers : rop1, rop2 (16-bits)
1 selector register : rsel (2-bits; used to choose between different versions of an instruction)
Temporary register  : TR (16-bits)
NZCV register (4-bits)
AR (12-bits - 4096 addresses; split between instructions, stack and memory mapped registers)
PC (12-bits)
DR (38-bits)
AC (32-bits)
IR (4-bits)


-- Execution Routines --

N.B. data: rsel bit(s) choose between reg/imm(coming from rop2) or address/value

fetch1 : AR <- PC
fetch2 : DR <- M; PC <- PC + 1
fetch3 : IR <- DR[37..34]; rsel <- [33..32]; rop1 <- DR[31..16]; rop2 <- DR[15..0]

nop1 : (do nothing)

rst1 : assert rst line

mov1 : r <- data 

ldr1 : AR <- rop2
ldr2 : r <- AR (stop here if address only needed)
ldr3 : r <- M (if value needed)

str1 : AR <- rop2
str2 : M <- data 

cmp1 : data - r

b1 : PC <- rop2

bgt1 : PC <- rop2 (Z clear, N and V are the same)

blt1 : PC <- rop2 (N and V are different)

beq1 : PC <- rop2 (Z set)

(sets NZCV) add1 : r <- data + data

(sets NZCV) sub1 : r <- data - data

(sets NZCV) mul1 : r <- data * data

and1 : r <- data & data

or1 : r <- data | data

mvn1 : r <- !data





-- Control Signals --



